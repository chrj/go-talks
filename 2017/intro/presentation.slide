Introduction to Go
The not so short version

Christian Joergensen
Co-founder, CTO at Ubivox Technologies
christian@ubivox.com
https://www.ubivox.com

* Agenda

- Language features
- Environment: Installing, Paths
- The language: Syntax, Types, Packages, Goroutines, Channels, Range loops, Defer
- Idioms: Names, Errors, Working with I/O
- Applications: HTTP, JSON, Database
- Compilation: Commands, Cross compilation
- Tools: `fmt`, `doc`, `vet`, `test`
- Resources

* Language features

- First class concurrency
- Garbage collected
- Statically typed
- Not OO
- Fast compilation
- Cross compilation
- Fast execution
- Single, statically linked binary
- Tooling
- Opinionated

* Environment

- Installing
- Paths

* Installing

- Tarball downloaded from [[https://golang.org/dl/]]
- Extract to `/usr/local`

  wget https://.../go1.9.2.linux-amd64.tar.gz
  tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz

Contains:

- The Go compiler suite
- Standard library

* Paths

Go finds your code using these environment variables:

- `GOPATH` where your local go code lives: `~/go`
- `GOROOT` where your downloaded go distribution lives: `/usr/local/go`

Also, add these to your path to `PATH`:

- `$GOPATH/bin`
- `$GOROOT/bin`

Now we're ready:

  $ go version
  go version go1.9.2 linux/amd64

* The language

- Syntax
- Types
- Packages
- Goroutines
- Channels
- Range loops
- Defer

* Syntax

- C-like, as most modern languages
- Clean, with very few keywords

A few gotchas:

- Declarations
- Less clutter
- Loops
- Condition expressions

* Syntax: Declarations

Coming from C, a declaration of two integers would read:

  int a, b;

In Go, the order is reversed:

  var a, b int

Short declarations using type inference with:

  var s = "Hello world"

Or even shorter:

  s := "Hello world"

* Syntax: Less clutter

- No paranthesis on condition expressions:
- No forced semi-colons
- No type stuttering using short declarations

  if a == 42 { 
    print("hello")
  }

  for i := 0; i < 10; i++ { ... }

  var c *http.Client = &http.Client{}

  c := &http.Client{}

* Syntax: Loops

- Only `for` loops
- In three variants

The naked loop (do)

  for { ... }

The single condition loop (while)

  for cond { ... }

The Regular loop (for)

  for init; cond; post { ... }

* Syntax: Condition expressions

- Add an "init" expression to the condition
- Variables lives only in the scope of the clauses

Turns:

  err := process()
  if err != nil {
    logError(err)
    return err
  }

Into:

  if err := process(); err != nil {
    logError(err)
    return err
  }

* Types

- Zero values
- Scalar types
- Collection types
- Defined types
- Pointer types
- Struct types
- Function types
- Method types
- Interface types
- The `nil` value

* Types: Zero values

- A newly declared variable will have the zero value of the type
- Some types require initialization before use
- Can be confusing, if the zero value has ambiguous meaning. E.g. time.
- Will discuss the zero value for each type I go through

Mostly what you would expect, though:

  var s string  // ""
  var i int     // 0
  var b bool    // false

* Types: Scalars

What one would expect:

- `bool`
- `int`, `int8`, `int16`, `int32`, `int64`
- `uint`, `uint8`, `uint16`, `uint32`, `uint64`
- `float32`, `float64`
- `complex64`, `complex128`
- `byte` (`uint8`), `rune` (`int32`)
- `string`

* Types: Collections

Slices, arrays:

  var a []int
  var b [][]int
  var c [8]int

Maps:

  var m map[string]int
  var n map[string]map[string][]int

Must be initialized:

  a := make([]int)
  b := make([]int, length, capacity)
  c := new([8]int)

  m := make(map[string]int)
  m := make(map[string]int, capacity)

* Working with maps

- Looking up and assigning to items in maps uses index expressions
- For map lookups, the zero value of the value type is returned if the key is not found
- Use special return value to test for existance

.play indexing.go /BEGIN demo OMIT/,/END demo OMIT/

* Working with arrays and slices

- Looking up items in arrays and slices uses index expressions as well
- Out of bound access results in runtime errors

- Slice expressions are also supported
- Slice expressions also works for strings, but read-only

.play slicing.go /BEGIN demo OMIT/,/END demo OMIT/


* Types: Defined types

- Allocates a new name for an existing type
- Same underlying type
- Supports the same operations
- Useful for adding methods to existing types

  type Amount float64

  func (a Amount) VAT() Amount  {
    return a * 0.25
  }

* Types: Pointer types

- All types are addressable
- C-like operators for addressing and indirection
- Scalar types needs workaround

.play pointers.go /BEGIN demo OMIT/,/END demo OMIT/

- Collection types are passed by descriptors
- The zero value for pointers is: nil

* Types: Struct

Class'ish types composited of other types:

  type Employee struct {
    Name       string
    Department string
    Salary     float64
  }

To create a new instance, use either a composite literal:

  e := Employee{
    Name:       "Christian",
    Department: "Development",
    Salary:     1000,
  }

Or allocate a zero instance and get a pointer with `new`. Then access the fields:

  e := new(Employee)
  e.Name = ...

* Types: Struct; cont'd

Pointer or non-pointer struct?

- Non-pointer structs are easier to garbage collect
- Pointer structs doesn't require a deep copy

If a struct requires initialization, create a constructor function. 
The naming convention is:

  func NewEmployee(name, department string, salary float64) *Employee {
    ...
  }

If it makes sense, strive to make the struct useful in a "zero" state. Examples:

- [[https://godoc.org/sync#Mutex][sync.Mutex]]
- [[https://godoc.org/net/http#Client][http.Client]]

* Types: Function types

- Can have multiple return variables

Typical function declaration:

  func TwoInts(a int) (int, int) {
    return 60 + a, 80 - a
  }

  var otherName func(int) (int, int)

  a, b := TwoInts(10)

Unused return values must be ignored:

  _, b := TwoInts(10) 

* Types: Function types, cont'd

Varadic parameters:

  func Sum(numbers ...int) int {
    // type of numbers will be []int
  }

  sum := Sum(42, 60)

Expanded:

  numbers := []int{42, 60}
  sum := Sum(numbers...)

- Only a single type
- Implemented as a slice

* Types: Method types

- Functions can be associated with any named type
- Only types in the same package
- The first parameter is called the `receiver`, and must be of the associated type
- Since most methods operation on a specific instance of the data, we use pointer receivers
- Non-pointer receiver method gets a copy of the underlying data
- The set of methods supported by a given type is called its Method Set.

  func (e *Employee) GiveRaise(percentage float64) {
    e.Salary *= 1 + percentage/100
  }

  func (e Employee) Greet() {
    fmt.Printf("Hello %s\n", e.Name)
  }

* Types: Interface types

- Describes behaviour; not data
- Can be empty
- Automagically implemented
- Type assertions to access underlying type

  type Greeter interface {
    Greet()
  }

  var g Greeter
  
  g = Employee{...}

  g.Greet()
  g.GiveRaise(13) // Oops: g.GiveRaise undefined (type Greeter has no field or method GiveRaise)

  e := g.(Employee)

  e.GiveRaise(13)

* The nil value

- Predeclared identifier, not a keyword
- Zero value for pointer, map, slice, function, channel and interface types
- Beware of panics

* Packages

- All source files in one directory must belong to one package.
- Two types: Program or package.

- Programs can be executed and import other packages
- Programs lives in package `main`
- When invoked, calls `main.main`

- Packages are imported using the `import` keyword.

.play hello_world.go

* Packages: Paths

- By convention packages are reference directly from VCS
- The Go tools will automagically checkout the latest version of your code and any depencies
- Hopefully they have stable APIs
- There support for vendored sources embedded in your code base.
- No standard tool for doing the actual vendoring and updating depdencies. Yet! †

Example: I have a package for implementing SMTP servers living on Github:

  $ go get github.com/chrj/smtpd

Checks out the master branch in: `$GOPATH/github.com/chrj/smtpd`

† [[https://github.com/golang/dep]]

* Goroutines

- Lightweight thread
- Scheduled across OS threads by Go runtime
- Concurrency construct
- Millions of goroutines are no problem (4 KB overhead)
- Can leak if not terminated
- Will be killed when the `main` function returns

To start a new goroutine that executes a function concurrently, use the `go` keyword followed by a function call:

  go expensiveCalculation()

* Channels

- Synchronized, thread-safe communication between goroutines
- Unbuffered or buffered
- Must be initialized with the `make` function before use:

  var c chan int

  c = make(chan int)      // Unbuffered
  c = make(chan int, 10)  // Buffered

Send operator:

  c <- 5

Receive operator:

  a := <-c

Beware of edge cases: zero (nil) or closed channel send/receive

* Channels: Select statements

- Listen on multiple cases of send/receive operations
- Blocks until a case is ready to proceed

.play select.go /BEGIN demo OMIT/,/END demo OMIT/

* Range loops

Use range loops for iteration:

- Strings (`index,` `[,rune]`)
- Slices (`index,` `[,item]`)
- Arrays (`index,` `[,item]`)
- Maps (`key` `[,value]`)
- Channels (`item`)

  for i := range s { ... }           // String
  for i, r := range s { ... }        // String
  for key := range m { ... }         // Map
  for key, value := range m { ... }  // Map
  for i := range s { ... }           // Slice, Array
  for i, item := range s { ... }     // Slice, Array
  for msg := range c { ... }         // Channel

* Goroutine / Channel / Range example:

A small example using both a goroutine and a channel for communication, read from a range loop:

.play goroutine_channel.go /START demo OMIT/,/END demo OMIT/

* Defer

- Schedules a function to be run when the surrounding function returns
- Useful for cleanup

Consider this:

  var m sync.Mutex

  func Update(...) {
    m.Lock()
    defer m.Unlock()

    // Critical area

  }

* Go Idioms

- Names
- Panics
- Errors
- Working with I/O

* Names

- An identifier in a package is only exported if it's capitalized
- Consider this sort of public/private variables

  var Author = "Christian"
  var secret = "hunter2"

- Use `CamelCase` for all names
- Keep local variables short:

  var e Employee
  var rd io.Reader
  var rw http.ResponseWriter

- Single method Interface names should be named after the method (`'...er'`):

  type Reader interface {
    Read(p []byte) (n int, err error)
  }

* Panics

For runtime errors, such as: 

- Out of bound access
- Nil pointer exception
- Nil map/channel/slice access
- Nil function calls
- Division by zero

Aborts execution of the current goroutine. Can be recovered using `recover()` in a `defer` statement, for exception like semantics inside a function:

  defer func() {
    if p := recover(); p != nil {
      log.Printf("run time panic: %v", p)
    }
  }()

* Errors

Error handling in Go feels very old fashioned at first. But it will grow on you.

The `error` type is a builtin interface:

  type error interface {
    Error() string
  }

Most often used in function declarations as the last parameter:

  func Read(p []byte) (n int, err error)

- All functions that can fail, returns an error 
- Errors are values and you can work with them
- There exists several packages for wrapping errors with extra data
- Consider if the error could be handled locally or return it

* Errors: Annotations

Common construct is wrapping a function in an `if` statement and on a failed call
return the error annotated with some extra details:

  if err := ReadFromNetwork(buf); err != nil {
    return errors.Wrap(err, "read from network failed")
  } 

  handle(buf)

- The `errors` package here is [[https://godoc.org/github.com/pkg/errors][github.com/pkg/errors]]
- Also has support for annotating errors with stack traces.

* Errors: Inspecting

The `net` package defines its own `Error` type:

  type Error interface {
    error
    Timeout() bool   // Is the error a timeout?
    Temporary() bool // Is the error temporary?
  }

We can work with that:

  for {
    if err := ReadFromNetwork(buf); err != nil {
      if nerr, ok := err.(net.Error); ok && nerr.Temporary() {
        time.Sleep(5 * time.Second)
        continue
      }
      return err
    } 
    break
  }

  handle(buf)

* Errors: Ignoring

- Don't ever do it
- But if you must, use the underscore notation

  func ParseConfigFile(filename string) (*Config, error) { ... }

  config, _ := ParseConfigFile("/etc/program.yaml)

A better solution: Turn errors into panics

  config := MustParseConfigFile("/etc/program.yaml)

- Create new wrapper function named `Must*`
- Panics on error

* Working with I/O

The standard library has a couple of clever interfaces in the [[https://godoc.org/io][io package]] that should be embraced everywhere it makes sense.

These interface are abstractions for everything that deals with byte-based I/O:

  package io

  type Reader interface {
    Read(p []byte) (n int, err error)
  }

  type Writer interface {
    Write(p []byte) (n int, err error)
  }

These are supported everywhere: File IO, Network IO, HTTP, RPC as well as for encoding/decoding various formats: JSON, XML, CSV, images.

* Applications

Finally, I'm going to go through a couple of real world applications of Go that most modern programmers will use at some point. In particular:

- HTTP Server
- JSON encoding / decoding
- Serving JSON over HTTP

* HTTP Server

Go has a production ready HTTP server in the standard library:

- This is what Go was built for
- Will easily scale to thousands of requests per second
- Runs each request in separate goroutine, scales across cores
- Support for TLS, HTTP/2

  package http

  type Handler interface {
    ServeHTTP(ResponseWriter, *Request)
  }  

  func ListenAndServe(addr string, handler Handler) error

* HTTP Server: The ResponseWriter interface

All comminication with the client goes through the `ResponseWriter` interface:

  type ResponseWriter interface {
    Header() Header
    Write([]byte) (int, error)
    WriteHeader(int)
  } 

You may recall the `io.Writer` interface. This is satisfied by the `ResponseWriter` type. So everything that can write, can write to an HTTP response. 

* HTTP Server: Request multiplexing

Having only a single handler for a whole server is not very useful. So in order to do path or host based routing, we need a request multiplexer. The `http` package has a simple one:

  package http

  type ServeMux
  func NewServeMux() *ServeMux
  func (mux *ServeMux) Handle(pattern string, handler Handler)
  func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))
  func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)

A default instance is available with the `Handle` and `HandleFunc` methods exposed at package level.

  package http

  func Handle(pattern string, handler Handler)
  func HandleFunc(pattern string, handler func(ResponseWriter, *Request))

* HTTP Server: Request multiplexing, cont'd

The bundled `ServeMux` is very basic. I prefer working with the [[http://www.gorillatoolkit.org/][Gorilla toolkit]], which also has support for:

- URL Parameters
- Method based routing
- Header based routing
- Sessions

There is a ton of other multiplexers available:

- You should prefer the ones that embraces the `http.Handler` interface.
- Composition between different packages will be easier

* Serving HTTP: Hello world server

A complete example:

.play http_hello_world.go

* JSON encoding / decoding

Despite the dynamic nature of JSON, Go has excellent JSON support.

- Works with single scalar values. Not very useful!
- Works with complex structs embedded in multiple levels with type check during encoding and decoding. Very useful!
- Can encode and decode directly from I/O streams (`io.Reader`, `io.Writer`)

Annotate your structs with tags:

  type Employee struct {
    Name       string  `json:"name"`
    Department string  `json:"department"`
    Salary     float64 `json:"salary"`
  }

* JSON encoding

Encode using the `json.Marshal` function:

.play json_dump_employee.go /BEGIN demo OMIT/,/END demo OMIT/

* JSON decoding

Decode using the `json.Marshal` function:

.play json_load_employee.go /BEGIN demo OMIT/,/END demo OMIT/

* JSON I/O

If you're encoding or decoding to something that supports the `io.Reader` or `io.Writer` interfaces use:

  func (e *Employee) Write(wr io.Writer) error {
    return json.NewEncoder(wr).Encode(e)
  }

  func Load(rd io.Reader) (*Employee, error) {
    e := Employee{}
    return &e, json.NewDecoder(rd).Decode(&e)
  }

Works very well with HTTP requests / responses.

* Serving JSON

In this example I'm going to write a web service exposing a database of employees in JSON:

- The database will just be a map indexed by employee ID
- I will create a defined type of the map in order to attach a method to the map

.code json_employee_server.go /BEGIN types OMIT/,/END types OMIT/

I will attach a `ServeHTTP` method to allow the map to implement the `http.Handler` interface:

  func (er EmployeeRegistry) ServeHTTP(rw http.ResponseWriter, req *http.Request) { ... }

* Serving JSON, cont'd

Here I configure the routes, and start the HTTP server

.play json_employee_server.go /BEGIN demo OMIT/,/END demo OMIT/

- I'm using the [[http://www.gorillatoolkit.org/pkg/mux][Gorilla mux]]

* Serving JSON, cont'd

The Handler:

.code json_employee_server.go /BEGIN handler OMIT/,/END handler OMIT/

* Compilation

- Commands
- Cross compilation

* Compilation commands

Differences between:

- `go` `build`
- `go` `install`
- `go` `get`


Build a single file:

  go build -o employee-server main.go

Build and install a program:

  go install github.com/chrj/employee-server

Fetch, build and install a program:

  go get github.com/chrj/employee-server

* Cross compilation

- Use the environment variables `GOOS` and `GOARCH`
- Supported OS'es: `android` `darwin` `dragonfly` `freebsd` `linux` `nacl` `netbsd` `openbsd` `plan9` `solaris` `windows`
- Supported Architectures: `386` `amd64` `amd64p32` `arm` `arm64` `ppc64` `ppc64le` `mips` `mipsle` `mips64` `mips64le` `s390x`
- Not every combination supported

Examples:

  GOOS=windows GOARCH=amd64 go install github.com/chrj/employee-server
  GOOS=darwin GOARCH=amd64 go install github.com/chrj/employee-server
  GOOS=linux GOARCH=amd64 go install github.com/chrj/employee-server

* go fmt

- No formatting controversy
- Easier to maintain
- Run on save in your editor

Turns:

  b = MyType{
  Prop: "Value",
  OtherProp: 60,
  }

Into:

  b = MyType{
      Prop:      "Value",
      OtherProp: 60,
  }


* go doc

- Autogenerated documentation from comments
- Access in terminal or in web browser
- You should document every exported name in your package

  $ go doc net/http.Server.Serve
  func (srv *Server) Close() error
      Close immediately closes all active net.Listeners and any connections in
      state StateNew, StateActive, or StateIdle. For a graceful shutdown, use
      Shutdown.

      Close does not attempt to close (and does not even know about) any hijacked
      connections, such as WebSockets.

      Close returns any error returned from closing the Server's underlying
      Listener(s).

Webserver:

  $ godoc -http=:8081   

* go vet

- Statically analyze your source code for common mistakes
- Run in CI pipeline or on save in your editor

Example checks:

- Locks copy
- Malformed struct tags
- [[https://golang.org/cmd/vet/][Full list of tests]]

There is a lot of other tools for static analysis. I prefer to run them using:

.link https://github.com/alecthomas/gometalinter gometalinter

Runs a lot of different linters concurrently.

* go test

- Unit test files goes with your normal program files: `*_test.go`.
- Prefer table driven tests

Let's test this:

.code sum/sum.go /BEGIN sum OMIT/,/END sum OMIT/

* go test; cont'd

With this test case:

.code sum/sum_test.go /BEGIN test OMIT/,/END test OMIT/

  $ go test .
  ok    github.com/chrj/go-talks/2017/intro/sum  0.001s

* Resources

- [[https://golang.org/ref/spec][The Go specification]]
- [[https://golang.org/doc/effective_go.html][Effective Go]]
- [[https://blog.golang.org/][The Go Blog]]
- Get an invite to [[https://invite.slack.golangbridge.org/][Gophers on Slack]]
- The [[https://reddit.com/r/golang][/r/golang]] subreddit
- [[https://groups.google.com/forum/#!forum/golang-nuts][golang-nuts]] on Google Groups

Also, don't be afraid to dive into the standard library source code and learn:

.link https://github.com/golang/go/tree/master/src